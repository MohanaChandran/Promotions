// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Promotions.Infra;

namespace Promotions.Infra.Migrations
{
    [DbContext(typeof(PromotionDBContext))]
    [Migration("20210724055142_four")]
    partial class four
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("prm")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Propmotions.Core.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("DocumentId");

                    b.ToTable("Document");

                    b.HasData(
                        new
                        {
                            DocumentId = 1,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(4983),
                            ModifiedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5017),
                            Name = "Marketing",
                            URL = "https://www.facebook.com/"
                        },
                        new
                        {
                            DocumentId = 2,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5165),
                            ModifiedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5169),
                            Name = "Marketing",
                            URL = "https://www.Google.com/"
                        },
                        new
                        {
                            DocumentId = 3,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5190),
                            ModifiedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5193),
                            Name = "Travel",
                            URL = "https://www.MakeMyTrip.com/"
                        },
                        new
                        {
                            DocumentId = 4,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5211),
                            ModifiedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5214),
                            Name = "Finance",
                            URL = "https://www.MoneyControl.com/"
                        },
                        new
                        {
                            DocumentId = 5,
                            CreatedBy = 0,
                            CreatedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5234),
                            ModifiedDate = new DateTime(2021, 7, 24, 5, 51, 42, 673, DateTimeKind.Utc).AddTicks(5237),
                            Name = "Finance",
                            URL = "https://www.ICICI.com/"
                        });
                });

            modelBuilder.Entity("Propmotions.Core.Keyword", b =>
                {
                    b.Property<int>("KeyWordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("KeyWordName")
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("KeyWordId");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("Propmotions.Core.KeywordDocumentMapping", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("integer");

                    b.Property<int>("DocumentId")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("KeywordId", "DocumentId");

                    b.HasIndex("DocumentId");

                    b.ToTable("KeywordDocumentMapping");
                });

            modelBuilder.Entity("Propmotions.Core.KeywordDocumentMapping", b =>
                {
                    b.HasOne("Propmotions.Core.Document", "Document")
                        .WithMany("DocumemtMappings")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Propmotions.Core.Keyword", "Keyword")
                        .WithMany("DocumemtMappings")
                        .HasForeignKey("KeywordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Keyword");
                });

            modelBuilder.Entity("Propmotions.Core.Document", b =>
                {
                    b.Navigation("DocumemtMappings");
                });

            modelBuilder.Entity("Propmotions.Core.Keyword", b =>
                {
                    b.Navigation("DocumemtMappings");
                });
#pragma warning restore 612, 618
        }
    }
}
